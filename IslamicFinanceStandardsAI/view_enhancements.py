#!/usr/bin/env python3
"""
View Enhancement Proposals

This script displays the actual enhancement proposals generated by the system
for a specific standard.
"""

import os
import sys
import json
import logging
from datetime import datetime

# Add the project directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import system components
from database.mock_knowledge_graph import MockKnowledgeGraph
from models.enhancement_schema import EnhancementProposal, EnhancementType

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def view_enhancements(standard_id="0"):
    """View enhancement proposals for a specific standard"""
    logger.info(f"Retrieving enhancement proposals for standard ID: {standard_id}")
    
    # Initialize mock knowledge graph
    kg = MockKnowledgeGraph()
    
    # Get standard information
    standard_info = kg.get_node_by_id(standard_id)
    if not standard_info:
        logger.error(f"Standard not found with ID: {standard_id}")
        return
    
    logger.info(f"Standard: {standard_info.get('properties', {}).get('title', 'Unknown')}")
    
    # Get enhancement proposals
    proposals = kg.get_enhancements_for_standard(standard_id)
    if not proposals:
        logger.info("No enhancement proposals found for this standard")
        return
    
    logger.info(f"Found {len(proposals)} enhancement proposals")
    
    # Display enhancement proposals
    print("\n" + "=" * 80)
    print(f"ENHANCEMENT PROPOSALS FOR {standard_info.get('title', 'Unknown')}")
    print("=" * 80 + "\n")
    
    for i, proposal in enumerate(proposals, 1):
        print(f"PROPOSAL {i}: {proposal.get('enhancement_type', 'Unknown Type')}")
        print("-" * 80)
        print(f"ID: {proposal.get('id', 'Unknown')}")
        print(f"Enhancement Type: {proposal.get('enhancement_type', 'Unknown')}")
        print(f"Confidence Score: {proposal.get('confidence_score', 0)}")
        print(f"Created At: {proposal.get('created_at', 'Unknown')}")
        print("\nENHANCED CONTENT:")
        print(proposal.get('enhanced_content', 'No content available'))
        print("\nREASONING:")
        print(proposal.get('reasoning', 'No reasoning available'))
        print("\nREFERENCES:")
        print(proposal.get('references', 'No references available'))
        print("\n" + "=" * 80 + "\n")
    
    # Save to file for easier viewing
    output_file = f"enhancement_proposals_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(output_file, "w") as f:
        json.dump(proposals, f, indent=2, default=str)
    
    logger.info(f"Enhancement proposals saved to {output_file}")

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="View enhancement proposals for a specific standard")
    parser.add_argument("--standard-id", type=str, default="0", help="ID of the standard to view enhancements for")
    args = parser.parse_args()
    
    view_enhancements(args.standard_id)
